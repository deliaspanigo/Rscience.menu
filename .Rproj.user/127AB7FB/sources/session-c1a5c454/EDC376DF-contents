library(yaml)
library(tools)
library(shiny)
cargar_todos_yaml <- function(dir_path) {
  archivos <- list.files(dir_path, pattern = "\\.yaml$", full.names = TRUE)
  lista <- list()
  for (arch in archivos) {
    nombre <- basename(arch)
    lista[[nombre]] <- yaml.load_file(arch)$choices
  }
  return(lista)
}

yaml_2_R <- function(choices){
  
  # Extraer los vectores
  vector_choice_external <- sapply(choices, function(x) x$choice_external)
  vector_choice_internal <- sapply(choices, function(x) x$choice_internal)
  vector_files <- sapply(choices, function(x) x$file)
  vector_file_names <- tools::file_path_sans_ext(vector_files)
  
  # Crear una lista con los vectores
  resultado <- list(
    choice_external = vector_choice_external,
    choice_internal = vector_choice_internal,
    vector_files = vector_files,
    vector_file_names = vector_file_names
  )
  
  return(resultado)
  
}

dir_path <- file.path("inst", "yaml")
list_yaml <- cargar_todos_yaml(dir_path)
list_R    <- lapply(list_yaml, yaml_2_R)
list_R    <- lapply(list_R, function(x){
  mi_list <- x
  vector_files <- x$vector_files
  vector_file_names <- x$vector_file_names
  
  vector_files[vector_files == ""] <- NA
  vector_file_names[vector_file_names == ""] <- NA
  
  mi_list$vector_files <- vector_files
  mi_list$vector_file_names <- vector_file_names
  mi_list
})
list_df_R <- lapply(list_R, data.frame)
names(list_df_R) <- tools::file_path_sans_ext(names(list_df_R))


# En el UI
ui <- fluidPage(
  titlePanel("Generador dinámico de selectInput"),
  uiOutput("todos_selects"),
  verbatimTextOutput("mostrar_seleccion")
)

# En el servidor
server <- function(input, output, session) {
  # Asumiendo que ya tienes 'mis_listas' cargada con tus estructuras
  # Aquí por ejemplo creamos dummy
  # mis_listas <- list_df_R
  status_ok <- "menu00"
  vector_names <- reactiveVal(status_ok)
  
  #observe(print(vector_names()))
  
  output$todos_selects <- renderUI({

    vector_ok <- vector_names()
    filtered_list_df_R <- list_df_R[vector_ok]
    
    ui_list <- lapply(names(filtered_list_df_R), function(x) {
      menu_name <- x
      selected_df <- filtered_list_df_R[[x]]
      vector_choices <- selected_df[, "vector_file_names"] #selected_df[, "choice_internal"]
      names(vector_choices) <- selected_df[, "choice_external"]
      print(selected_df)
      #print(vector_choices)
      
      selectInput(paste0("sel_", x), paste("Selecciona en", x), vector_choices)
    })
    do.call(tagList, ui_list)
  })
  
  
  # ReactiveVal para recopilar todas las selecciones
  selecciones_todas <- reactiveVal(list())
  
  # Observar y actualizar la lista de selecciones cuando cambien los inputs
  observe({
    vector_ok <- vector_names()
    
    # Generar los nombres de los inputs
    input_names <- paste0("sel_", vector_ok)
    
    # Obtener las selecciones actuales
    lista_selecciones <- lapply(input_names, function(name) {
      input[[name]]
    })
    names(lista_selecciones) <- vector_ok
    
    # Actualizar el reactiveVal
    selecciones_todas(lista_selecciones)
    
    vector_names(c(status_ok, unlist(lista_selecciones)))
  })
  
  # Mostrar todas las selecciones en algún output para verificar
  output$mostrar_seleccion <- renderPrint({
    selecciones_todas()
  })
}

shinyApp(ui, server)