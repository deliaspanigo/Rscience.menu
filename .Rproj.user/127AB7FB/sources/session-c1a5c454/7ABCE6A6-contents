library(shiny)

ui <- fluidPage(
  h3("Menú secuencial dinámico"),
  uiOutput("menus"),
  verbatimTextOutput("resultado")
)

server <- function(input, output, session) {
  # Lista que va a guardar los identificadores de cada menú
  menus <- reactiveVal(list("menu1"))
  
  # Un dataset de ejemplo para los choices (puedes ajustar)
  choices_df <- data.frame(
    id = c("op1", "op2", "opA", "opB"),
    label = c("Opción 1", "Opción 2", "Opción A", "Opción B"),
    parent = c(NA, NA, "op1", "op1")  # ejemplo: algunas opciones dependen de otras
  )
  
  # Crear los UIs de los menús
  output$menus <- renderUI({
    urls <- menus()
    # Para cada "id" de menú, crea un selectInput
    ui_list <- lapply(urls, function(id_menu) {
      # Opciones para este menú: las que tengan parent igual a id_menu
      choices <- choices_df$label[choices_df$parent == id_menu]
      
      selectInput(
        inputId = paste0("select_", id_menu),
        label = paste("Selecciona en", id_menu),
        choices = choices,
        selected = choices[1]
      )
    })
    do.call(tagList, ui_list)
  })
  
  # Cuando cambian los inputs, agregamos nuevos menús según la selección
  observeEvent(input$select_menu1, {
    # Obtener la opción seleccionada en el primer menú
    opt <- input$select_menu1
    # Si selecciona "Opción 1", agregar un nuevo menú
    if (opt == "Opción 1") {
      # Solo si todavía no está agregado
      if (!any(sapply(menus(), function(x) grepl("menu2", x)))) {
        # Añadir un nuevo "menú"
        current <- menus()
        new_menu_id <- "menu2"
        menus(c(current, new_menu_id))
      }
    }
  })
  
  # Mostrar las selecciones
  output$resultado <- renderPrint({
    sapply(menus(), function(id_menu) input[[paste0("select_", id_menu)]])
  })
}

shinyApp(ui, server)
