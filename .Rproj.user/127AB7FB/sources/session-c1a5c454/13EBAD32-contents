library(shiny)

ui <- fluidPage(
  h3("Menús dependientes dinámicos avanzados"),
  uiOutput("ui_menus"),
  verbatimTextOutput("all_selections")
)

server <- function(input, output, session) {
  # Lista inicial: solo el primer menú
  menus_activos <- reactiveVal(c("menu00"))
  
  # Guardar todas las selecciones
  selecciones <- reactiveVal(list())
  
  # Dataset ejemplo que has proporcionado
  list_df_R <- list(
    menu00 = data.frame(
      choice_external = c("01 - Estadística Descriptiva", "02 - Estadísticos Clásicos",
                          "03 - Estadística Multivariada", "04 - Machine Learning"),
      choice_internal = c("opt01", "opt02", "opt03", "opt04"),
      vector_file_names = c("menu01", "menu02", "menu03", "menu04")
    ),
    menu01 = data.frame(
      choice_external = c("Opt 1", "Opt 2", "Opt 3", "Opt 4", "Opt 5"),
      choice_internal = c("opt01", "opt02", "opt03", "opt04", "opt05"),
      vector_file_names = c(NA, NA, NA, NA, NA)
    ),
    menu02 = data.frame(
      choice_external = c("Test 1", "Test 2", "Test 3"),
      choice_internal = c("opt1", "opt2", "opt3"),
      vector_file_names = c(NA, NA, NA)
    ),
    menu03 = data.frame( 
      choice_external = c("Opción A", "Opción B"),
      choice_internal = c("a", "b"),
      vector_file_names = c(NA, NA)
    )
    # Puedes agregar más menús según tu estructura
  )
  
  # Renderizar dinámicamente los selectInput
  output$ui_menus <- renderUI({
    current_menus <- menus_activos()
    ui_list <- lapply(current_menus, function(nomb) {
      df <- list_df_R[[nomb]]
      choices <- setNames(df$choice_internal, df$choice_external)
      
      selectInput(
        inputId = paste0("sel_", nomb),
        label = paste("Selecciona en", nomb),
        choices = choices,
        selected = choices[1]
      )
    })
    do.call(tagList, ui_list)
  })
  
  # Función auxiliar para chequear y agregar menús dependientes
  check_and_add_menu <- function(nomb_menu) {
    current <- menus_activos()
    if (!(nomb_menu %in% current) && !is.null(nomb_menu) && !is.na(nomb_menu)) {
      # Solo si no está ya añadido
      menus_activos(c(c(current, nomb_menu)))
    }
  }
  
  # Observador global para todos los selectInputs activos
  observe({
    current_menus <- menus_activos()
    for (nomb in current_menus) {
      # Crear un observer para cada select
      observeEvent(input[[paste0("sel_", nomb)]], {
        seleccion <- input[[paste0("sel_", nomb)]]
        df <- list_df_R[[nomb]]
        fila <- df[df$choice_internal == seleccion, ]
        next_menu <- fila$vector_file_names
        if (!is.na(next_menu) && next_menu != "") {
          check_and_add_menu(next_menu)
        }
      }, ignoreNULL = FALSE)
    }
  })
  
  # Actualizamos las selecciones en el reactiveVal `selecciones`
  observe({
    current_menus <- menus_activos()
    new_selections <- list()
    for (nomb in current_menus) {
      sel_id <- paste0("sel_", nomb)
      if (!is.null(input[[sel_id]])) {
        new_selections[[nomb]] <- input[[sel_id]]
      }
    }
    # Guardar todas las selecciones
    selecciones(new_selections)
    # Opcional: mostrar en consola
    print(new_selections)
  })
  
  # Mostrar todas las selecciones para revisión
  output$all_selections <- renderPrint({
    selecciones()
  })
}

shinyApp(ui, server)
