library(yaml)
library(tools)
library(shiny)
cargar_todos_yaml <- function(dir_path) {
  archivos <- list.files(dir_path, pattern = "\\.yaml$", full.names = TRUE)
  lista <- list()
  for (arch in archivos) {
    nombre <- basename(arch)
    lista[[nombre]] <- yaml.load_file(arch)$choices
  }
  return(lista)
}

yaml_2_R <- function(choices){
  
  # Extraer los vectores
  vector_choice_external <- sapply(choices, function(x) x$choice_external)
  vector_choice_internal <- sapply(choices, function(x) x$choice_internal)
  vector_files <- sapply(choices, function(x) x$file)
  vector_file_names <- tools::file_path_sans_ext(vector_files)
  
  # Crear una lista con los vectores
  resultado <- list(
    choice_external = vector_choice_external,
    choice_internal = vector_choice_internal,
    vector_files = vector_files,
    vector_file_names = vector_file_names
  )
  
  return(resultado)
  
}

dir_path <- file.path("inst", "yaml")
list_yaml <- cargar_todos_yaml(dir_path)
list_R    <- lapply(list_yaml, yaml_2_R)
list_R    <- lapply(list_R, function(x){
  mi_list <- x
  vector_files <- x$vector_files
  vector_file_names <- x$vector_file_names
  
  vector_files[vector_files == ""] <- NA
  vector_file_names[vector_file_names == ""] <- NA
  
  mi_list$vector_files <- vector_files
  mi_list$vector_file_names <- vector_file_names
  mi_list
})
list_df_R <- lapply(list_R, data.frame)
names(list_df_R) <- tools::file_path_sans_ext(names(list_df_R))



ui <- fluidPage(
  uiOutput("todos_selects"),
  verbatimTextOutput("mostrar_seleccion")
)

server <- function(input, output, session) {
  # Crear un reactiveVal para los nombres
  vector_menu <- reactiveVal(c("menu00"))
  
  # Si necesitas cambiar los valores de vector_menu en algún momento, puedes usar:
  # vector_menu(c("otro_menu"))
  
  # Supongamos que list_df_R está definido aquí o previamente
  # list_df_R <- list(
  #   menu00 = data.frame(choice_internal = c("A", "B"), choice_external = c("Opción A", "Opción B")),
  #   menu01 = data.frame(choice_internal = c("X", "Y"), choice_external = c("Opción X", "Opción Y"))
  # )
  
  # Generar dinámicamente los selectInput solo para los nombres en vector_menu
  output$todos_selects <- renderUI({
    # Obtener los nombres en modo reactivo
    current_names <- vector_menu()
    # Filtrar la lista según estos nombres
    filtered_list_df_R <- list_df_R[current_names]
    
    ui_list <- lapply(names(filtered_list_df_R), function(x) {
      selected_df <- filtered_list_df_R[[x]]
      
      vector_choices <- selected_df[, "vector_file_names"]
      names(vector_choices) <- selected_df[, "choice_external"]
      
      selectInput(
        inputId = paste0("sel_", x),
        label = paste("Selecciona en", x),
        choices = vector_choices
      )
    })
    do.call(tagList, ui_list)
  })
  
  # ReactiveVal para recopilar todas las selecciones
  selecciones_todas <- reactiveVal(list())
  
  # Observar y actualizar la lista de selecciones
  observe({
    # Obtener los nombres actuales de vector_menu
    current_names <- vector_menu()
    # Generar los nombres de los inputs
    input_names <- paste0("sel_", current_names)
    
    # Obtener las selecciones actuales
    lista_selecciones <- lapply(input_names, function(name) {
      input[[name]]
    })
    names(lista_selecciones) <- current_names
    
    # Actualizar el reactiveVal
    selecciones_todas(lista_selecciones)
    
    print(unlist(selecciones_todas()))
    
    vector_menu("menu00", unlist(selecciones_todas()))
  })
  

  
  # Mostrar todas las selecciones
  output$mostrar_seleccion <- renderPrint({
    selecciones_todas()
  })
}

shinyApp(ui, server)