library(shiny)
library(bslib)

# Simulamos tu lista de marcos de datos para el ejemplo
list_df_R <- list(
  menu00 = data.frame(
    choice_external = c("01 - Estadística Descriptiva", "02 - Estadísticos Clásicos", 
                        "03 - Estadística Multivariada", "04 - Machine Learning"),
    choice_internal = c("opt_01", "opt_02", "opt_03", "opt_04"),
    vector_files = c("menu01.yaml", "menu02.yaml", "menu03.yaml", "menu04.yaml"),
    vector_file_names = c("menu01", "menu02", "menu03", "menu04"),
    stringsAsFactors = FALSE
  ),
  
  menu01 = data.frame(
    choice_external = c("01 - Estadística descriptiva 1Q", "02 - Estadística descriptiva 1C",
                        "02 - Estadística descriptiva 2C independientes", 
                        "02 - Estadística descriptiva 2C apareadas",
                        "02 - Estadística descriptiva QC"),
    choice_internal = c("opt_01", "opt_02", "opt_03", "opt_04", "opt_05"),
    vector_files = NA,
    vector_file_names = NA,
    stringsAsFactors = FALSE
  ),
  
  menu02 = data.frame(
    choice_external = c("01 - Test para 1Q", "02 - Test para 1C", "03 - Test para 2Q",
                        "04 - Test para 2C independientes", "05 - Test para 2C apareadas",
                        "06 - Test para QC", "07 - Modelos Lineales Generales",
                        "08 - Modelos Lineales Generales Mixtos", "09 - Modelos Lineales Generalizados",
                        "10 - Modelos Lineales Generalizados Mixtos", 
                        "11 - Modelos Lineales Generalizados Mixtos",
                        "12 - Estadistica de distribucion libre"),
    choice_internal = c("opt_01", "opt_02", "opt_03", "opt_04", "opt_05", "opt_06", "opt_07",
                        "opt_08", "opt_09", "opt_10", "opt_11", "opt_12"),
    vector_files = c(NA, NA, NA, NA, NA, NA, "menu02_07.yaml", NA, NA, NA, NA, NA),
    vector_file_names = c(NA, NA, NA, NA, NA, NA, "menu02_07", NA, NA, NA, NA, NA),
    stringsAsFactors = FALSE
  ),
  
  menu02_07 = data.frame(
    choice_external = c("01 - Fixed", "02 - Random", "03 - Mixed"),
    choice_internal = c("opt_01", "opt_02", "opt_03"),
    vector_files = c("menu_02_07_01.yaml", NA, NA),
    vector_file_names = c("menu_02_07_01", NA, NA),
    stringsAsFactors = FALSE
  ),
  
  menu_02_07_01 = data.frame(
    choice_external = c("01 - Anova", "02 - Ancova", "03 - Dummy", "04 - Linear Regresion"),
    choice_internal = c("opt_01", "opt_02", "opt_03", "opt_04"),
    vector_files = c("menu_02_07_01_01.yaml", NA, NA, NA),
    vector_file_names = c("menu_02_07_01_01", NA, NA, NA),
    stringsAsFactors = FALSE
  ),
  
  menu_02_07_01_01 = data.frame(
    choice_external = c("01 - Anova 1 way", "02 - Anova 1 way and 1 block", 
                        "03 - Anova 2 ways", "04 - Anova 3 ways", "05 - Anova Multifactorial"),
    choice_internal = c("opt_01", "opt_02", "opt_03", "opt_04", "opt_05"),
    vector_files = NA,
    vector_file_names = NA,
    stringsAsFactors = FALSE
  )
)

ui <- page_sidebar(
  title = "Sistema de Menús Dinámicos",
  sidebar = sidebar(
    h3("Selección de opciones"),
    # Inicialmente mostraremos solo el primer menú (menu00)
    uiOutput("dynamic_menus")
  ),
  card(
    card_header("Resultados"),
    h4("Selección Actual:"),
    verbatimTextOutput("selection_path"),
    h4("Datos de la selección:"),
    verbatimTextOutput("selection_info")
  )
)

server <- function(input, output, session) {
  # Variable reactiva para almacenar la ruta de menús seleccionada
  selected_path <- reactiveVal(c("menu00"))
  
  # Función para generar un menú basado en el nombre del menú
  generate_menu_ui <- function(menu_name, menu_index) {
    # Si el menú no existe, retornamos NULL
    if (!menu_name %in% names(list_df_R)) {
      return(NULL)
    }
    
    menu_data <- list_df_R[[menu_name]]
    menu_id <- paste0("menu_", menu_index)
    
    selectInput(
      inputId = menu_id,
      label = paste0("Nivel ", menu_index, ":"),
      choices = setNames(menu_data$choice_internal, menu_data$choice_external)
    )
  }
  
  # Observar cambios en los menús y actualizar la ruta
  observe({
    path <- selected_path()
    current_level <- length(path)
    
    # Si todavía no hay selecciones, no hacemos nada
    if (current_level == 0) return()
    
    # Nombre del último menú en la ruta
    last_menu <- tail(path, 1)
    
    # Obtenemos el input ID correspondiente al nivel actual
    menu_id <- paste0("menu_", current_level)
    
    # Si no existe el input para este nivel, no hacemos nada
    if (!menu_id %in% names(input)) return()
    
    # Obtenemos la selección para este nivel
    selection <- input[[menu_id]]
    
    # Obtenemos el índice de la fila seleccionada en el menú actual
    menu_data <- list_df_R[[last_menu]]
    selected_row <- which(menu_data$choice_internal == selection)
    
    # Si no hay una fila seleccionada válida, no hacemos nada
    if (length(selected_row) == 0) return()
    
    # Verificamos si hay un menú hijo
    next_menu_file <- menu_data$vector_file_names[selected_row]
    
    # Si la selección actual lleva a un nuevo menú
    if (!is.na(next_menu_file) && next_menu_file %in% names(list_df_R)) {
      # Actualizamos la ruta con el nuevo menú
      new_path <- c(path[1:current_level], next_menu_file)
      
      # Si la nueva ruta es diferente a la actual, la actualizamos
      # Esto evita bucles infinitos de actualización
      if (!identical(new_path, selected_path())) {
        selected_path(new_path)
      }
    } else {
      # Si hemos cambiado la selección en un nivel intermedio,
      # cortamos la ruta hasta este nivel
      if (current_level < length(selected_path())) {
        selected_path(path[1:current_level])
      }
    }
  })
  
  # Generar la UI de menús dinámicamente
  output$dynamic_menus <- renderUI({
    path <- selected_path()
    
    # Lista para almacenar los menús
    menus <- list()
    
    # Generamos un menú para cada nivel en la ruta
    for (i in seq_along(path)) {
      menus[[i]] <- generate_menu_ui(path[i], i)
    }
    
    # Devolvemos todos los menús
    do.call(tagList, menus)
  })
  
  # Mostrar la ruta de selección
  output$selection_path <- renderPrint({
    path <- selected_path()
    cat("Ruta de menús: ", paste(path, collapse = " > "), "\n")
    
    # Mostrar también la selección específica en cada nivel
    for (i in seq_along(path)) {
      menu_id <- paste0("menu_", i)
      if (menu_id %in% names(input)) {
        menu_data <- list_df_R[[path[i]]]
        selection <- input[[menu_id]]
        selection_text <- menu_data$choice_external[menu_data$choice_internal == selection]
        cat("Nivel ", i, ": ", selection_text, " (", selection, ")\n", sep = "")
      }
    }
  })
  
  # Mostrar información detallada de la selección actual
  output$selection_info <- renderPrint({
    path <- selected_path()
    if (length(path) == 0) return(cat("No hay selección"))
    
    last_menu <- tail(path, 1)
    menu_id <- paste0("menu_", length(path))
    
    if (!menu_id %in% names(input)) return(cat("Selección incompleta"))
    
    selection <- input[[menu_id]]
    menu_data <- list_df_R[[last_menu]]
    
    selected_row <- which(menu_data$choice_internal == selection)
    if (length(selected_row) == 0) return(cat("Selección no encontrada"))
    
    cat("Información completa de la selección:\n")
    print(menu_data[selected_row, ])
    
    next_menu_file <- menu_data$vector_file_names[selected_row]
    if (!is.na(next_menu_file) && next_menu_file %in% names(list_df_R)) {
      cat("\nEste menú tiene submenús disponibles.")
    } else {
      cat("\nEsta es una selección final (sin submenús).")
    }
  })
}

shinyApp(ui = ui, server = server)
